#!/usr/bin/python3.3

import unittest
import requests
import io
import re

class TestDACS(unittest.TestCase):
    re_dacs_cookie = re.compile(r"\b(?P<name>DACS:[^=]+)=(?P<value>[^;]+);(?: path=(?P<path>[^;]+);)?(?: domain=(?P<domain>[^;]+);)?")

    def setUp(self):
        import configparser
        self.config = configparser.ConfigParser()
        self.config.read("test-sso.cfg")
        self.username = self.config["auth"]["username"]
        self.passwd = self.config["auth"]["password"]
        self.dacs_user = "DACS:DEBIANORG::DEBIAN:{}".format(self.username)
        self.s = requests.Session()

    def do_sso_login(self):
        """
        Log into sso.debian.org and return the dacs credentials that we got
        """
        r = self.s.get("https://sso.debian.org/cgi-bin/dacs/dacs_authenticate", data={
            "DACS_JURISDICTION": "DEBIAN",
            "DACS_BROWSER": "1", # FIXME: what is this?
            "USERNAME": self.username,
            "PASSWORD": self.passwd,
        })
        self.assertEqual(r.status_code, 200)
        self.assertIn("{}=".format(self.dacs_user), r.headers["Set-Cookie"])
        mo = self.re_dacs_cookie.search(r.headers["Set-Cookie"])
        self.assertIsNotNone(mo)
        # There should be no cookie domain, because we are not using subdomains
        # on sso.d.o
        self.assertIsNone(mo.group("domain"))
        return mo.groupdict()

    def test_sso_login(self):
        r = self.s.get("https://sso.debian.org/cgi-bin/dacs/dacs_current_credentials", allow_redirects=False)
        self.assertEqual(r.status_code, 200)
        self.assertTrue("You are not authenticated within federation <tt><b>DEBIANORG</b></tt>" in r.text)

        self.do_sso_login()

        r = self.s.get("https://sso.debian.org/cgi-bin/dacs/dacs_current_credentials", allow_redirects=False)
        self.assertEqual(r.status_code, 200)
        self.assertTrue('You are authenticated within federation <span class="fed_name">DEBIANORG</span> as' in r.text)
        self.assertTrue('<li><b>DEBIAN:{}</b><br>'.format(self.username) in r.text)

    def test_visit_sso(self):
        """
        Login, visit a page and ensure we are logged in
        """
        info = self.do_sso_login()
        r = self.s.get("https://sso.debian.org/", headers={
            "Cookie": "{name}={value}".format(**info)
        })
        self.assertEqual(r.status_code, 200)
        self.assertTrue("You are currently logged in" in r.text)

    def test_auth_transfer(self):
        """
        Login, then initiate auth transfer to another domain
        """
        info = self.do_sso_login()

        ## Initiate auth transfer
        r = self.s.get("https://sso.debian.org/cgi-bin/dacs/dacs_auth_transfer", allow_redirects=False, headers={
            "Cookie": "{name}={value}".format(**info)
        }, data={
            "OPERATION": "EXPORT",
            "TARGET_FEDERATION": "CONTRIBUTORS",
            "DACS_IDENTITY": "DEBIANORG::DEBIAN:{}".format(self.username),
            "TRANSFER_SUCCESS_URL": "http://www.example.org",
            "TRANSFER_ERROR_URL": "http://www.ifailed.debian.org",
        })
        #print(r.headers["content-type"], r.text)
        self.assertEqual(r.status_code, 302)
        self.assertEqual(r.headers["Location"], "https://www.example.org")

    def test_anonymous_visit_sso(self):
        r = self.s.get("https://sso.debian.org/", allow_redirects=False)
        self.assertEqual(r.status_code, 200)
        self.assertTrue("You are not currently logged in", r.text)

    def test_anonymous_visit_contributors(self):
        r = self.s.get("https://contributors.debian.org/", allow_redirects=False)
        self.assertEqual(r.status_code, 200)
        self.assertTrue("You are not currently logged in", r.text)

    def test_anonymous_visit_nm(self):
        r = self.s.get("https://nm.debian.org/", allow_redirects=False)
        self.assertEqual(r.status_code, 200)
        self.assertTrue("You are not currently logged in", r.text)


if __name__ == '__main__':
    unittest.main()
