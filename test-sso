#!/usr/bin/python3.3

import unittest
import requests
import io
import re

class TestDACS(unittest.TestCase):
    re_dacs_cookie = re.compile(r"\b(?P<name>DACS:[^=]+)=(?P<value>[^;]+);(?: path=(?P<path>[^;]+);)?(?: domain=(?P<domain>[^;]+);)?")

    def setUp(self):
        import configparser
        self.config = configparser.ConfigParser()
        self.config.read("test-sso.cfg")
        self.username = self.config["auth"]["username"]
        self.password = self.config["auth"]["password"]
        self.dacs_user = "DACS:DEBIANORG::DEBIAN:{}".format(self.username)
        self.s = requests.Session()

    def want_dacs_cookie_info(self, r):
        self.assertIn("{}=".format(self.dacs_user), r.headers["Set-Cookie"])
        mo = self.re_dacs_cookie.search(r.headers["Set-Cookie"])
        self.assertIsNotNone(mo)
        # There should be no cookie domain, because we are not using subdomains
        # on sso.d.o
        self.assertIsNone(mo.group("domain"))
        return mo.groupdict()

    def do_sso_login(self):
        """
        Log into sso.debian.org and return the dacs credentials that we got
        """
        r = self.s.get("https://sso.debian.org/cgi-bin/dacs/dacs_authenticate", params={
            "DACS_JURISDICTION": "DEBIAN",
            "DACS_BROWSER": "1", # FIXME: what is this?
            "USERNAME": self.username,
            "PASSWORD": self.password,
        })
        self.assertEqual(r.status_code, 200)
        res = self.want_dacs_cookie_info(r)
        self.assertEqual("DACS:DEBIANORG::DEBIAN:{}".format(self.username), res["name"])
        return res

    def test_sso_login(self):
        r = self.s.get("https://sso.debian.org/cgi-bin/dacs/dacs_current_credentials", allow_redirects=False)
        self.assertEqual(r.status_code, 200)
        self.assertTrue("You are not authenticated within federation <tt><b>DEBIANORG</b></tt>" in r.text)

        self.do_sso_login()

        r = self.s.get("https://sso.debian.org/cgi-bin/dacs/dacs_current_credentials", allow_redirects=False)
        self.assertEqual(r.status_code, 200)
        self.assertTrue('You are authenticated within federation <span class="fed_name">DEBIANORG</span> as' in r.text)
        self.assertTrue('<li><b>DEBIAN:{}</b><br>'.format(self.username) in r.text)

    def test_visit_sso(self):
        """
        Login, visit a page and ensure we are logged in
        """
        info = self.do_sso_login()
        r = self.s.get("https://sso.debian.org/", headers={
            "Cookie": "{name}={value}".format(**info)
        })
        self.assertEqual(r.status_code, 200)
        self.assertTrue("You are currently logged in" in r.text)

        r = self.s.get("https://sso.debian.org/cgi-bin/dacs/dacs_signout", allow_redirects=False)
        self.assertEqual(r.status_code, 302)
        self.assertEqual(r.headers["Location"], "https://sso.debian.org/sso/logout?DACS_VERSION=1.4&DACS_FEDERATION=DEBIANORG&DACS_JURISDICTION=DEBIAN")

    def test_auth_transfer_dacs(self):
        """
        Login, then initiate auth transfer to another domain
        """
        info = self.do_sso_login()

        ## Initiate auth transfer
        r = self.s.get("https://sso.debian.org/cgi-bin/dacs/dacs_auth_transfer", allow_redirects=False, headers={
            "Cookie": "{name}={value}".format(**info)
        }, params={
            "OPERATION": "EXPORT",
            "TARGET_FEDERATION": "CONTRIBUTORS",
            "DACS_IDENTITY": "DEBIANORG::DEBIAN:{}".format(self.username),
            "TRANSFER_SUCCESS_URL": "https://www.example.org",
            # "TRANSFER_ERROR_URL": "http://www.ifailed.debian.org",
        })
        self.assertEqual(r.status_code, 302)
        self.assertTrue(r.headers["Location"].startswith("https://contributors.debian.org:443/cgi-bin/dacs/dacs_auth_transfer?OPERATION=IMPORT&"))

        r = self.s.get(r.headers["Location"], allow_redirects=False)
        self.assertEqual(r.status_code, 302)
        self.assertEqual(r.headers["Location"], "https://www.example.org")
        info = self.want_dacs_cookie_info(r)
        # DEBIANORG or CONTRIBUTORS?
        self.assertEqual("DACS:DEBIANORG::DEBIAN:{}".format(self.username), info["name"])

    def test_auth_transfer_ui_not_logged(self):
        """
        Visit the login page asking for auth transfer, but not being logged in:
        we get the login page
        """
        # If we visit the login url with a site= argument and we are not logged
        # in
        r = self.s.get("https://sso.debian.org/sso/login", allow_redirects=False, params={
            "site": "contributors.debian.org",
            "url": "https://contributors.debian.org/",
        })

        # Then we get the form
        self.assertEqual(r.status_code, 200)
        self.assertTrue('<form name="loginForm"' in r.text)
        mo = re.search(r'<input type="hidden" name="DACS_AUTH_SUCCESS_HANDLER" value="(?P<url>[^"]+)">', r.text)
        self.assertIsNotNone(mo)
        success_handler = mo.group("url")
        self.assertEqual(success_handler, "https://contributors.debian.org/")
        mo = re.search(r'<input type="hidden" name="DACS_ERROR_URL" value="(?P<url>[^"]+)">', r.text)
        self.assertIsNotNone(mo)
        error_url = mo.group("url")
        # FIXME: this does not look right, as I'd expect sso.d.o to handle
        # dacs_authenticate errors. I have no time to look it up now, though.
        self.assertEqual(error_url, "https://contributors.debian.org/")

        # After we log in
        r = self.s.post("https://sso.debian.org/cgi-bin/dacs/dacs_authenticate", allow_redirects=False, params={
            "USERNAME": self.username,
            "PASSWORD": self.password,
            "DACS_BROWSER": 1,
            "ENABLE_AUTH_HANDLERS": 1,
            "DACS_JURISDICTION": "DEBIAN",
            "DACS_AUTH_SUCCESS_HANDLER": success_handler,
            "DACS_ERROR_URL": error_url,
        })
        self.assertEqual(r.status_code, 302)
        self.assertEqual(r.headers["Location"], "https://www.example.org")
        self.fail("FIXME: not finished, and it doesn't really end this way")

    def test_auth_transfer_ui(self):
        """
        Login, then initiate auth transfer to another domain
        """
        # If we're authenticated with DACS
        info = self.do_sso_login()

        # And we visit the login url with a site= argument
        r = self.s.get("https://sso.debian.org/sso/login", allow_redirects=False, headers={
            "Cookie": "{name}={value}".format(**info)
        }, params={
            "site": "contributors.debian.org",
            "url": "http://contributors.debian.org/",
        })
        self.assertEqual(r.status_code, 302)
        self.assertTrue(r.headers["Location"].startswith("https://contributors.debian.org:443/cgi-bin/dacs/dacs_auth_transfer?OPERATION=EXPORT&"))

        self.fail("FIXME: not finished")

    def test_anonymous_visit_sso(self):
        r = self.s.get("https://sso.debian.org/", allow_redirects=False)
        self.assertEqual(r.status_code, 200)
        self.assertTrue("You are not currently logged in", r.text)

    def test_anonymous_visit_contributors(self):
        r = self.s.get("https://contributors.debian.org/", allow_redirects=False)
        self.assertEqual(r.status_code, 200)
        self.assertTrue("You are not currently logged in", r.text)

    def test_anonymous_visit_nm(self):
        r = self.s.get("https://nm.debian.org/", allow_redirects=False)
        self.assertEqual(r.status_code, 200)
        self.assertTrue("You are not currently logged in", r.text)

    def test_logout_links(self):
        for site in "https://sso.debian.org", "https://contributors.debian.org", "https://nm.debian.org":
            r = self.s.get("{}/cgi-bin/dacs/dacs_signout".format(site), allow_redirects=False)
            if r.status_code == 302:
                if r.headers["Location"].startswith("https://sso.debian.org/sso/acs_error"):
                    self.fail("{} denies access to dacs_signout".format(site))
            self.assertEqual(r.status_code, 200)
            self.assertTrue("You are not authenticated within federation" in r.text)

if __name__ == '__main__':
    unittest.main()
